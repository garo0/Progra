# -*- coding: utf-8 -*-
"""Clase13ABB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vYvN-zZQ-fqYPWttwy53xGSU3JWtZnXr

# Repaso Clase Anterior: Árboles (Capítulo 9.7)

## Árboles binarios (AB)

![ab](https://drive.google.com/uc?export=view&id=0B3jzzeIB00s1TzdHRGpJYVllZjg)


Cumplen alguna de las siguientes condiciones:
- Un AB es vacío, o
- Tiene un valor, un AB a la izquierda, y otro AB a la derecha


### Tareas típicas sobre un AB


- Crear un AB
- Contar los nodos de un AB
- Calcular la altura de un AB
- Contar las hojas de un AB

### Creación de un AB

Es una estructura recursiva que contiene un **AB** = **valor** + **AB izquierdo** + **AB derecho**
"""

import estructura



#Arbol Binario
#AB: valor(any), izq(AB), der(AB)
estructura.crear("AB","valor izq der")





# creamos un AB





ab=AB("F",\
    AB("B",\
        AB("A",None,None),\
        AB("D",\
            AB("C",None,None),\
            AB("E",None,None))),\
    AB("G",\
        None,\
        AB("I",\
            AB("H", None, None),\
            None)))

"""### Ejemplo: Calcular número de valores (o nodos) de un AB

Todas las operaciones en un AB siguen una misma estructura:

- revisamos el valor: si es vacío (o cumple alguna condición) es el caso base que termina la recursión.
- Pero, si el **valor no es vacío**:
  - aplicamos alguna operación recursiva sobre **AB izquierdo** y **AB derecho**
"""

#valores: AB -> int
#n° de valores de arbol A
#ej: valores(ab) -> 9

def valores(A):
    assert A==None or type(A)==AB
    if A==None: 
        return 0
    return 1 + valores(A.izq) + valores(A.der)

assert valores(ab)==9

"""### Ejemplo: Determinar la altura (profundidad máxima) de un AB

Si el AB:
1. es vacío, su altura es 0
2. si no es vacío su altura es 1 + máximo de altura entre su AB izquiero y AB derecho
"""

#altura: AB -> int
#n° de niveles de valores de arbol A
#ej: altura(ab) -> 4

def altura(A):
    assert A==None or type(A)==AB
    if A==None:
        return 0
    return 1 + max(altura(A.izq),altura(A.der))

assert altura(ab)==4

"""### Ejemplo: Contar las hojas de un AB

Las hojas son nodos que no tienen AB izquiero ni AB derecho (es decir, nodos sin hijos). En la figura son A, C, E, H.
"""

#hojas: AB -> int
#n° de valores sin "hijos"
#ej: hojas(ab)->4

def hojas(A):
    assert A==None or type(A)==AB
    if A==None: 
        return 0
    if A.izq==None and A.der==None:
        return 1
    return hojas(A.izq) + hojas(A.der)

assert hojas(ab)==4

"""# Clase 13: AB y ABB (Árbol de Búsqueda Binaria)

### Ejemplo: AB de expresiones aritméticas

![ab expresión](https://drive.google.com/uc?export=view&id=0B3jzzeIB00s1cG0zMXNzcUhmZmc)
"""

#arbol expresión
#AB con numeros en los valores de las hojas
#   y operadores en los valores de las no-hojas









ae=AB("-", \
      AB(2,None,None),\
      AB("*",\
         AB(3,None,None),\
         AB(4,None,None)))

#evaluar: AB -> num
#evalua expresión representada en AB
#ej: evaluar(ae) -> -10
def evaluar(A):

    assert type(A)==AB
    
    if A.izq==None and A.der==None: 
        return A.valor   
    
    a=evaluar(A.izq) #primer operando
    b=evaluar(A.der) #segundo operando
    op=A.valor       #operador
 
    if op=="+": 
        return a+b
    if op=="-": 
        return a-b
    if op=="*": 
        return a*b
    if op=="/": 
        return a/b

assert evaluar(ae)==-10

"""## ABB: Árbol de Búsqueda Binaria

Un ABB es un árbol binario tal que:

- es un árbol vacío (None)

o sino,

- valores en el AB **izquierdo** son **menores** que el valor
- valores en el AB **derecho** son **mayores** que el valor
- AB izquierdo y AB derecho son también ABB

![ab](https://drive.google.com/uc?export=view&id=0B3jzzeIB00s1TzdHRGpJYVllZjg)
"""

import estructura
#Arbol Binario
#AB: valor(any), izq(AB), der(AB)
estructura.crear("AB","valor izq der")

abb=AB("F",\
    AB("B",\
        AB("A",None,None),\
        AB("D",\
            AB("C",None,None),\
            AB("E",None,None))),\
    AB("G",\
        None,\
        AB("I",\
            AB("H", None, None),\
            None)))

"""### Cómo encontrar un valor en un ABB"""

#buscaValor: any AB -> bool
#True si x está en arbol
#ej: buscaValor("A",abb)->True

def buscaValor(x,arbol):
    
    assert arbol==None or type(arbol)==AB
    if arbol==None: 
        return False
      
    elif arbol.valor==x:
        return True
    elif x < arbol.valor: 
        return buscaValor(x,arbol.izq)
    elif x > arbol.valor: 
        return buscaValor(x,arbol.der)
    
assert buscaValor("A",abb)

"""### Ejemplo: Cómo saber si un AB es un ABB?
Es decir, cómo sabemos si un árbol binario cumple con las condiciones para ser un árbol de búsqueda binario?
"""

#esMenorAB: any AB -> bool
#True si 'valor' es mayor que todos los elementos de arbol
#ej: esMenorAB("F",AB("G",None,AB("I",AB("H", None, None),None)))
# es True
def esMenorAB(valor,arbol):
    if arbol==None:
        return True
    if (arbol.valor > valor):
        return esMenorAB(valor, arbol.izq) and esMenorAB(valor, arbol.der)
    return False

assert esMenorAB("F",AB("G",\
                            None,\
                            AB("I",\
                                  AB("H", None, None),\
                                  None)))

#esMayorAB: any AB -> bool
#True si 'valor' es menor que todos los elementos de arbol
#ej: esMayorAB("F", AB("B",AB("A",None,None),AB("D",AB("C",None,None),AB("E",None,None))))
def esMayorAB(valor,arbol):
    if arbol==None:
        return True
    if (arbol.valor < valor):
        return esMayorAB(valor,arbol.izq) and esMayorAB(valor,arbol.der)
    return False
    
assert esMayorAB("F", AB("B",\
                            AB("A",None,None),\
                            AB("D",\
                                AB("C",None,None),\
                                AB("E",None,None))))

#esABB: AB -> bool
#True si AB es un ABB
#ej: esABB(abb)->True

def esABB(ab):
    if(ab==None):
        return True
    if (esMayorAB(ab.valor,ab.izq) and esMenorAB(ab.valor,ab.der) and \
        esABB(ab.izq) and esABB(ab.der)):
        return True
    else:
        return False 
assert esABB(abb)
assert not esABB(AB("B",AB("C",None,AB("A",None,None)),None))
assert not esABB(AB(50,AB(25,AB(10,None, None), AB(10000,None,None)),AB(70,AB(55,None,None),AB(80,None,None))))

#escribir: AB -> None
#escribir valores de ABB A en orden ...
#ej: escribir(abb) -> ...

def escribir(arbol):
    assert arbol==None or type(arbol)==AB
    if arbol==None: 
        return
    
    escribir(arbol.izq)
    print arbol.valor
    escribir(arbol.der)

escribir(abb)

#insertar: any, AB -> AB
#nuevo ABB insertando x en ABB A
#ej: insertar("A",AB("B",None,None))->
#                 AB("B",AB("A",None,None),None)
def insertar(x,arbol):
   
    assert arbol==None or type(arbol)==AB
    if arbol==None: 
        return AB(x,None,None)
    
    assert x!=arbol.valor
    if x<arbol.valor: 
        return AB(arbol.valor, insertar(x,arbol.izq), arbol.der)
    if x>arbol.valor: 
        return AB(arbol.valor, arbol.izq, insertar(x,arbol.der) )

assert insertar("A",AB("B",None,None))== \
               AB("B",AB("A",None,None),None)

"""## Ejercicio 8 (entrega vía u-cursos antes la auxiliar)

- **`def ordenar(L)`**: entrega una lista con los valores de la lista L en orden ascendente
- Indicación. Usar un ABB
- Probar con una lista de 100 números generados al azar
"""